#textdomain wesnoth-Random_Campaign

# All macros concerning the random picking of maps are kept here.

#define RC_FETCH_NEXT_MAP LEVEL
    # Set level value
    # As cl doesn't work right in this add-on,
    # set_var level= will allow selecting of level
    # var is cleared in {RC_NEXT_SCENARIO}
    [if]
        {VARIABLE_CONDITIONAL level equals $null}
        [then]
            {VARIABLE level {LEVEL}}
        [/then]
    [/if]

    # Check to see if going to epilogue
    [if]
        {VARIABLE_CONDITIONAL level equals 8}
        [then]
            {VARIABLE map_override Epilogue}
        [/then]
    [/if]

    # This section insures that no map is repeated during the campagin
    # After a map is chosen, it is removed from the array
    # set_var map= will allow selecting of map
    # var is cleared in {RC_NEXT_SCENARIO}
    [if]
        {VARIABLE_CONDITIONAL map equals $null}
        [then]
		    # randomly choose a map
		    # check if map list has entries
		    {FOREACH map_choice.list i}
		        [if]
		            {VARIABLE_CONDITIONAL map_choice.list[$i].map not_equals $null}
		            [then]
		                {VARIABLE list_has_entries "yes"}
		            [/then]
		        [/if]
		    {NEXT i}
		    # if map list is empty, fill it.
		    # It is map_choice.list so that it is
		    # easier to read in the :inspect listing
		    [if]
		        {VARIABLE_CONDITIONAL list_has_entries not_equals "yes"}
		        [then]
				    [set_variables]
				        name=map_choice.list
				        mode=replace
				        [split]
				            # list="Barren,Cave,Citadel,Desert,Flood,Island,Jungle,Lava,Marsh,River,Vale,Volcano,Winter"
				            list="Barren,Desert,Flood,Jungle,Marsh,River,Vale,Volcano,Winter"
				            key=map
				            separator=,
				            remove_empty=yes
				        [/split]
				    [/set_variables]
		        [/then]
		    [/if]
		    {CLEAR_VARIABLE list_has_entries}
            [set_variable]
                name=map_list
                [join]
                    variable=map_choice.list
                    key=map
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP map rand $map_list}
            {CLEAR_VARIABLE map_list}
        [/then]
    [/if]
    {LOOKUP_INDEX map_choice.list map $map index}
    {CLEAR_VARIABLE map_choice.list[$index].map}
    {CLEAR_VARIABLE index}

    # assemble the next scenario id
    # The scenario id is assembled from {LEVEL} and map.
    {VARIABLE next_scenario "0$level|_$map|"}
#enddef

#define RC_CHOOSE_OPPONENT
    [if]
        {VARIABLE_CONDITIONAL opponent_override equals $null}
        [then]
		    # randomly choose a faction from the era
		    # check if opponent list has entries
		    {FOREACH opponent_choice.list i}
		        [if]
		            {VARIABLE_CONDITIONAL opponent_choice.list[$i].opponent not_equals $null}
		            [then]
		                {VARIABLE list_has_entries "yes"}
		            [/then]
		        [/if]
		    {NEXT i}
		    # if opponent list is empty, fill it.
		    # It is opponent_choice.list so that it is
		    # easier to read in the :inspect listing
		    [if]
		        {VARIABLE_CONDITIONAL list_has_entries not_equals "yes"}
		        [then]
		            {RC_LOAD_ERA}
		            {FOREACH era[0].multiplayer_side i}
		                {VARIABLE opponent_choice.list[$i].opponent "$era[0].multiplayer_side[$i].id"}
		            {NEXT i}
		            {RC_CLEAR_ERA}
		        [/then]
		    [/if]
		    {CLEAR_VARIABLE list_has_entries}
		    # This section insures that no opponent is repeated during the campagin until all have been chosen.
		    # After an opponent is chosen, it is removed from the array
		    [set_variable]
		        name=opponent_list
		        [join]
		            variable=opponent_choice.list
		            key=opponent
		            separator=,
		            remove_empty=yes
		        [/join]
		    [/set_variable]
		    {VARIABLE_OP opponent rand $opponent_list}
		    {CLEAR_VARIABLE opponent_list}
        [/then]
        [else]
            {VARIABLE opponent $opponent_override}
            {CLEAR_VARIABLE opponent_override}
        [/else]
    [/if]
    {LOOKUP_INDEX opponent_choice.list opponent $opponent index}
    {CLEAR_VARIABLE opponent_choice.list[$index].opponent}
    {CLEAR_VARIABLE index}
#enddef

#define RC_NEXT_SCENARIO LEVEL
    [event]
        name=preload
        first_time_only=no
        # This makes the calulations in gold_and_income.cfg simpler
        # This is in preload so the hack of loading a scenario start in
        # sp, then making a save, then loading that save through
        # the mp dialog will work right. Otherwise base_income would be
        # set back to 2 in that process.
        [lua]
            code=<< wesnoth.game_config.base_income = 0 >>
        [/lua]
    [/event]

    [event]
        name=prestart
        # Clearing variables we don't need at the moment
        # This macro needs to be last in leveldata
        # so others work right.
        {CLEAR_VARIABLE next_scenario,level,map}
    [/event]

    [event]
        name=enemies_defeated
        {VARIABLE_OP player1.victories add 1} # Custom Campaign Compatibility
        {RC_FETCH_NEXT_MAP {LEVEL}}
        [if]
            {VARIABLE_CONDITIONAL next_scenario not_equals "08_Epilogue"}
            [then]
                {RC_CHOOSE_OPPONENT}
                {RC_CALCULATE_SCENARIO_GOLD_AND_INCOME $level}
                [endlevel]
                    result=victory
                    next_scenario=$next_scenario
                    carryover_report=yes
                    carryover_percentage=0
                    carryover_add=no
                    bonus=no
                    linger_mode=yes
                    save=yes
                    replay_save=yes
                    reveal_map=yes
                    [next_scenario_settings]
                        {RC_SET_GOLD_AND_INCOME_LEVELS}
                    [/next_scenario_settings]
                [/endlevel]
                {RC_CLEAR_GOLD_AND_INCOME_VARIABLES}
            [/then]
            [else]
                [endlevel]
                    result=victory
                    next_scenario=$next_scenario
                    carryover_report=no
                    linger_mode=yes
                    save=no
                    replay_save=yes
                    reveal_map=yes
                [/endlevel]
            [/else]
        [/if]
    [/event]
#enddef

#define RC_FIRST_SCENARIO LEVEL
    [event]
        name=prestart
        {RC_FETCH_NEXT_MAP {LEVEL}}
        {RC_CHOOSE_OPPONENT}
        {RC_CALCULATE_SCENARIO_GOLD_AND_INCOME $level}
        [endlevel]
            result=victory
            next_scenario=$next_scenario
            carryover_report=no
            carryover_percentage=0
            carryover_add=no
            bonus=no
            linger_mode=no
            save=yes
            replay_save=no
            reveal_map=no
            [next_scenario_settings]
                {RC_SET_GOLD_AND_INCOME_LEVELS}
            [/next_scenario_settings]
        [/endlevel]
        {RC_CLEAR_GOLD_AND_INCOME_VARIABLES}
    [/event]
#enddef
