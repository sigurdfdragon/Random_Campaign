#textdomain wesnoth-Random_Campaign

#define RC_LOAD_ERA
    # This reads the chosen era, derives two other eras and loads each era into an array
    # RC_START_MENU, RC_SIDE_COMPUTER & RC_UPDATE_PLAYER_RECRUIT make use of this info
    # Both arrays must be the same length and contain the same set of
    # faction id's in order so upgrading the recruit list later will work properly
    [lua]
        code=<< wesnoth.dofile "~add-ons/Random_Campaign/lua/load_era.lua" >>
    [/lua]
#enddef

#define RC_CLEAR_ERA
    {CLEAR_VARIABLE era}
#enddef

#define RC_DETERMINE_SIDE CONTROLLER VAR
    # places the side matches CONTROLLER  in VAR
    # This allows shuffle sides to work
    # This code is 1 player friendly only
    [store_side]
        variable=side
    [/store_side]
    {FOREACH side i}
        [if]
            {VARIABLE_CONDITIONAL side[$i].controller equals {CONTROLLER}}
            [then]
                {VARIABLE {VAR} $side[$i].side}
            [/then]
        [/if]
    {NEXT i}
    {CLEAR_VARIABLE side}
#enddef

#define RC_SIDE_PLAYER GOLD INCOME
    # Player Side
    # Relevant settings & effects for the player
    # Side for Scenario 1 and on. Contains leader id for recalling
    [side]
        side=1
        save_id=Player1
        team_name=Team 1
        controller=human
        persistent=yes
        type=Peasant # Placeholder
        id="Commander" # Custom Campaign Compatability
        gold={GOLD}
        income={INCOME}
        gold_lock=no
        income_lock=no
    [/side]

    carryover_percentage=0
    carryover_add=no

    [event]
        name=prestart

        # clear computer side recall list
        # as a workaround for a shuffle sides bug. the bug
        # gives computer a copy of recall list when side is shuffled.
        # workaround here, as this event runs before computer side's
        # version and also impacts Custom Campaign Compatablility.
        {RC_DETERMINE_SIDE ai computer_side}
        [store_unit]
            [filter]
                side=$computer_side
            [/filter]
            variable=temp
            kill=yes
        [/store_unit]
        {CLEAR_VARIABLE temp,computer_side}

        {RC_DETERMINE_SIDE human player_side}
        # Custom Campaign Compatability
        [if]
            {VARIABLE_CONDITIONAL custom_campaign.modification equals yes}
            [then]
                [lua]
                    code=<< wesnoth.dofile "~add-ons/Random_Campaign/lua/cc_starting_recall.lua" >>
                [/lua]
            [/then]
        [/if]
        [if]
            {VARIABLE_CONDITIONAL scenario equals 7}
            [then]
                {VARIABLE player1.turn_limit -1}
            [/then]
        [/if]
        [modify_turns]
            value=$player1.turn_limit
        [/modify_turns]

        # show the player the objectives for the map
        [if]
            {VARIABLE_CONDITIONAL custom_campaign.modification equals $null}
            [then]
                [objectives]
                    side=$player_side
                    [objective]
                        description= _ "Defeat enemy leader"
                        condition=win
                    [/objective]
                    [objective]
                        description= _ "Death of your leader"
                        condition=lose
                    [/objective]
                    [objective]
                        description= _ "Turns run out"
                        condition=lose
                        show_turn_counter=yes
                        [show_if]
                            {VARIABLE_CONDITIONAL player1.turn_limit not_equals -1}
                        [/show_if]
                    [/objective]
                [/objectives]
            [/then]
            [else]
                # Custom Campaign Comptability
                [lua]
                    [args]
                        side=$player_side
                    [/args]
                    code=<< wesnoth.dofile "~add-ons/Random_Campaign/lua/cc_objectives.lua" >>
                [/lua]
            [/else]
        [/if]

        # Set player's color, flag, & visibility choices
        [modify_side]
            side=$player_side
            color=$player1.color
            flag=$player1.flag
            flag_icon=$player1.flag_icon
            fog=$player1.fog
            shroud=$player1.shroud
            village_gold=$player1.village_gold
            village_support=$player1.village_support
        [/modify_side]

        # Reinsert the recruitment_pattern because it doesn't persist with
        # rest of player data in a persistent side.
        [modify_side]
            side=$player_side
            [ai]
                recruitment_pattern=$player1.recruitment_pattern
            [/ai]
        [/modify_side]

        # store all player units, clear u_id & return to game
        # as a workaround for a underlying_id collision.
        [store_unit]
            [filter]
                side=$player_side
            [/filter]
            variable=temp
            kill=yes
        [/store_unit]
        {FOREACH temp i}
            {VARIABLE temp[$i].underlying_id $null}
            [unstore_unit]
                variable=temp[$i]
            [/unstore_unit]
        {NEXT i}
        {CLEAR_VARIABLE temp,player_side}
    [/event]
#enddef

#define RC_SIDE_COMPUTER SIDE ERA G1 G2 G3 G4 I1 I2 I3 I4
    # Make a random enemy for the side & era specified
    [side]
        side={SIDE}
        team_name=Team 2
        controller=ai
        # the next two keys are a workaround for https://gna.org/bugs/index.php?20245
        save_id=ai
        current_player=_"ai"
        no_leader=yes
        gold={ON_DIFFICULTY4 {G1} {G2} {G3} {G4}}
        income={ON_DIFFICULTY4 {I1} {I2} {I3} {I4}}
        gold_lock=no
        income_lock=no
        faction=Random
        allow_player=no
    [/side]

    [event]
        name=prestart
        # This makes an enemy faction.
        # This extracts the needed info out of the Era array to make the faction.
        {RC_LOAD_ERA}

        # Which era to pick from
        {VARIABLE index.era {ERA}}

        # randomly choose a faction from the era
        # check if opponent list has entries
        {FOREACH opponent_choice.list i}
            [if]
                {VARIABLE_CONDITIONAL opponent_choice.list[$i].opponent not_equals $null}
                [then]
                    {VARIABLE list_has_entries "yes"}
                [/then]
            [/if]
        {NEXT i}
        # if opponent list is empty, fill it.
        # It is opponent_choice.list so that it is
        # easier to read in the :inspect listing
        [if]
            {VARIABLE_CONDITIONAL list_has_entries not_equals "yes"}
            [then]
                {CLEAR_VARIABLE opponent_choice}
                {FOREACH era[0].multiplayer_side i}
                    {VARIABLE opponent_choice.list[$i].opponent "$era[0].multiplayer_side[$i].id"}
                {NEXT i}
            [/then]
        [/if]
        {CLEAR_VARIABLE list_has_entries}
        # This section insures that no opponent is repeated during the campagin until all have been chosen.
        # After an opponent is chosen, it is removed from the array
        [set_variable]
            name=opponent_list
            [join]
                variable=opponent_choice.list
                key=opponent
                separator=,
                remove_empty=yes
            [/join]
        [/set_variable]
        {VARIABLE_OP opponent rand $opponent_list}
        {LOOKUP_INDEX opponent_choice.list opponent $opponent index}
        {CLEAR_VARIABLE opponent_choice.list[$index].opponent}
        {LOOKUP_INDEX era[$index.era].multiplayer_side id $opponent index.faction}
        {CLEAR_VARIABLE opponent_list,opponent}

        # Now we have era & faction, randomly pick a leader
        [if]
            {VARIABLE_CONDITIONAL era[$index.era].multiplayer_side[$index.faction].random_leader equals $null}
            [then]
                {VARIABLE_OP leader rand $era[$index.era].multiplayer_side[$index.faction].leader}
            [/then]
            [else]
                {VARIABLE_OP leader rand $era[$index.era].multiplayer_side[$index.faction].random_leader}
            [/else]
        [/if]

        # Determine computer side
        {RC_DETERMINE_SIDE ai computer_side}

        # Now that we have everything, make the side
        # Make the leader
        [unit]
            side=$computer_side
            id=Enemy Commander
            type=$leader
            canrecruit=yes
            random_gender=yes
            placement=map,leader
            # All leaders get powerful trait
            [modifications]
                {RC_TRAIT_POWERFUL}
                {TRAIT_INTELLIGENT}
            [/modifications]
        [/unit]
        {RC_QUICK_4MP_LEADERS $computer_side}

        # set enemy side settings
        {RC_COLOR_ADJUST $player1.color enemy_color}
        [modify_side]
            side=$computer_side
            color=$enemy_color
            # color flag modify side glitch workaround
            flag="flags/flag-[1~4].png:150"
            flag_icon="flags/flag-icon.png"
            recruit=$era[$index.era].multiplayer_side[$index.faction].recruit
            [insert_tag]
                name=ai
                variable=era[$index.era].multiplayer_side[$index.faction].ai
            [/insert_tag]
            fog=$player1.fog
            shroud=$player1.shroud
            village_gold=$player1.village_gold
            village_support=$player1.village_support
        [/modify_side]
        {CLEAR_VARIABLE enemy_color,leader,index,computer_side}
        {RC_CLEAR_ERA}
    [/event]
#enddef
