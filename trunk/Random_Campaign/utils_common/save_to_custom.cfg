#textdomain wesnoth-Random_Campaign

#define RC_SAVE_TO_CUSTOM
    [event]
        name=victory
        
        [message]
            speaker=narrator
            message= _ "Congratulations, you won! You can save your army for use in the Custom Campaign add-on, even if you don't have it yet. Would you like to save it?"
            [option]
                message= _ "Yes"
                [command]
                    {VARIABLE answer yes}
                [/command]
            [/option]
            [option]
                message= _ "No"
                [command]
                    {VARIABLE answer no}
                [/command]
            [/option]
        [/message]
        
        [if]
            {VARIABLE_CONDITIONAL answer equals yes}
            [then]                
                # get global var
                {VARIABLE_FROM_GLOBAL SigurdFireDragon_Custom_Campaign army            army          1}
                {VARIABLE_FROM_GLOBAL SigurdFireDragon_Custom_Campaign id_counter      id_counter    1}
                
                # increment the unique id
                {VARIABLE_OP id_counter add 1}
                
                # Find the proper index to store the army
                # This will place it at the end of the array,
                # or at slot 0 if this is the first army to be saved
                # {LOOKUP_INDEX army id $chosen_army index}
                {VARIABLE index $army.length}
                
                # Save the unique id
                {VARIABLE army[$index].id $id_counter}
                
                # Take a name for the Army
                [message]
                    speaker=narrator
                    message= _ "Enter a name for your Army:"
                    [text_input]
                        variable=army[$index].name
                        max_length=40
                    [/text_input]
                [/message]
                
                # Get and store recruit and recruitment_pattern
                [lua]
                    code=<<
                        wesnoth.set_variable("current_side", wesnoth.sides[1].__cfg)
                        wesnoth.set_variable("current_recruit", wesnoth.sides[1].__cfg.recruit)
                    >>
                [/lua]
                {VARIABLE army[$index].recruit $current_recruit}
                
                {LOOKUP_INDEX current_side.ai.aspect id recruitment_pattern index2}
                {VARIABLE army[$index].recruitment_pattern $current_side.ai.aspect[$index2].facet.value}
                
                {CLEAR_VARIABLE current_recruit,current_side,index2}
				
				# Set starting_recall
				{VARIABLE army[$index].starting_recall 0}
           
                # Store army to troop_list
                [store_unit]
                    variable=army[$index].troop_list
                    kill=no
                    [filter]
                        side=1 # 3 player version not yet supported for this
                    [/filter]
                [/store_unit]
                                
                # Heal, Clear Status, Reset attacks and move, set side to 1
                # This (hopefully) replicates everything that is done to restore a unit
                # upon victory. Must do it this way, as storing units occurs before
                # the victory restoring of all the players units.
                {FOREACH army[$index].troop_list i}
                    # clear underlying_id & id, ensuring uniqueness to prevent missing units
                    # if two units have the same underlying_id, one will not appear on the recall list
                    [if]
						{VARIABLE_CONDITIONAL army[$index].troop_list[$i].id equals "Main Leader"} # Custom Campaign Compatability
						[then]
							{CLEAR_VARIABLE army[$index].troop_list[$i].underlying_id} # only clear this
						[/then]
						[else] # clear both
							{CLEAR_VARIABLE army[$index].troop_list[$i].underlying_id}
							{CLEAR_VARIABLE army[$index].troop_list[$i].id}
						[/else]
					[/if]
                                    
                    {CLEAR_VARIABLE army[$index].troop_list[$i|].status} # flush, gets recreated when unpacked
                    {VARIABLE army[$index].troop_list[$i|].hitpoints "$army[$index].troop_list[$i|].max_hitpoints"}
                    {VARIABLE army[$index].troop_list[$i|].moves "$army[$index].troop_list[$i|].max_moves"}
                    {VARIABLE army[$index].troop_list[$i|].attacks_left "$army[$index].troop_list[$i|].max_attacks"}
                    {VARIABLE army[$index].troop_list[$i|].goto_x 0}
                    {VARIABLE army[$index].troop_list[$i|].goto_y 0}
                    {VARIABLE army[$index].troop_list[$i|].side 1} # restore side to 1 for viewing in the Custom Campaign Map
                {NEXT i}
                
                # Record the number of victories, pick 7 or 4 based on scenario_prefix
                [if]
                    {VARIABLE_CONDITIONAL scenario_prefix equals $null}
                    [then]
                        {VARIABLE_OP army[$index].victories add 7}
                    [/then]
                    [else]
                        {VARIABLE_OP army[$index].victories add 4}
                    [/else]
                [/if]

                # Record the time of victory
                [lua]
                    code=<< wesnoth.set_variable("system_time", os.date()) >>
                [/lua]
                {VARIABLE army[$index].last_victory $system_time}
                
                # sort the army array here in case player goes directly to using it, so the list is in proper order
                [lua]
                    code=<<
                        helper = wesnoth.require "lua/helper.lua"
                        local tArray = helper.get_variable_array("army")
                        local function top_down_left_right(uFirstElem, uSecElem)
                          if uFirstElem.name == uSecElem.name then return uFirstElem.id < uSecElem.id end
                          return uFirstElem.name < uSecElem.name
                        end
                        table.sort(tArray, top_down_left_right)
                        helper.set_variable_array("army", tArray)
                    >>
                [/lua]

                # Record changes in Global Var
                {GLOBAL_VARIABLE SigurdFireDragon_Custom_Campaign army            army          1}
                {GLOBAL_VARIABLE SigurdFireDragon_Custom_Campaign id_counter      id_counter    1}
                
                # Clear unneeded vars
                {CLEAR_VARIABLE index,system_time,answer,army,id_counter}
            [/then]
        [/if]
    [/event]
#enddef
