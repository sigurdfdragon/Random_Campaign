#textdomain wesnoth-Random_Campaign

# SETUP SCENARIO MACROS

#define RC_ENEMY_SIDE_START SIDE VILLAGE_GOLD
    [side]
        side={SIDE}
        allow_player=no
        controller=ai
        hidden=yes
        team_name=2
        fog=no
        shroud=no
        gold=175
        village_gold={VILLAGE_GOLD}
    [/side]
#enddef

#define RC_PLAYER_SIDE_START SIDE VILLAGE_GOLD COLOR_LOCK
    [side]
        side={SIDE}
        save_id="P{SIDE}"
        persistent=yes
        controller=human
        team_name=1
        team_lock=yes
        color_lock={COLOR_LOCK}
        gold_lock=yes
        income_lock=yes
        fog=yes
        shroud=yes
        gold=200
        village_gold={VILLAGE_GOLD}
        share_maps=yes
        share_view=yes
        id="Commander" # Custom Campaign Compatability
    [/side]

    [event]
        name=victory

        # store initial player game setup data in the opening scenario
        # var player is never cleared, as it's needed throughout the campaign
        [store_side]
            side={SIDE}
            variable=player{SIDE}
        [/store_side]
		
		# if aoh_type_era checked, add 100 gold & 4 income to player side
		[if]
			{VARIABLE_CONDITIONAL random_campaign.aoh_type_era equals yes}
			[then]
				{VARIABLE_OP player{SIDE}.gold add 100}
				{VARIABLE_OP player{SIDE}.income add 4}
			[/then]
		[/if]

        [store_turns]
            variable=player{SIDE}.turn_limit
        [/store_turns]

        # use lua to extract ai recruitment_pattern and add it
        {VARIABLE current_side {SIDE}}
        [lua]
            code=<<
                local i = wesnoth.get_variable("current_side")
                wesnoth.set_variable("lua_store", wesnoth.sides[i].__cfg)
            >>
        [/lua]
        {LOOKUP_INDEX lua_store.ai.aspect id "recruitment_pattern" index}
        {VARIABLE player{SIDE}.recruitment_pattern "$lua_store.ai.aspect[$index].facet.value"}
        {CLEAR_VARIABLE current_side}

        # we only want the change from normal income, so account for that
        {VARIABLE_OP player{SIDE}.income sub 2}

        # store leader, to recreate later
        [store_unit]
            variable=temp_unit
            kill=yes
            [filter]
                side={SIDE}
            [/filter]
        [/store_unit]
        # Copy only the info we need to the player var
        {VARIABLE player{SIDE}.leader $temp_unit.type}
        {VARIABLE player{SIDE}.gender $temp_unit.gender}
        {CLEAR_VARIABLE temp_unit}

        # make sure shroud is on,
        # as creating unit will cause map to be seen if it is off.
        [modify_side]
            side={SIDE}
            fog=yes
            shroud=yes
        [/modify_side]

        # Recreate unit now so heroic trait can be given
        [unit]
            side={SIDE}
            id="Commander" # Custom Campaign Compatability
            role="Leader"  # Custom Campaign Compatability
            type=$player{SIDE}.leader
            name=$player{SIDE}.name
            gender=$player{SIDE}.gender
            canrecruit=yes
            placement=map,leader
            # All leaders get heroic trait only
            [modifications]
                {RC_TRAIT_HEROIC}
            [/modifications]
        [/unit]
    [/event]
#enddef

#define RC_ENEMY_SIDE_STORE SIDE
    # The enemy sides needed throughout the campaign
    # are made in the intial scenario.
    # This macro stores all the needed information into var enemy
    #
    # extract data from side {SIDE} to side 9
    # then merge difficulty options into the stored sides
    # gather all data necessary to recreate a side in
    # future scenarios
    #
    # This is written this way so it can be used for the enemy sides
    # in both the 1p and 3p versions.

    [event]
        name=victory

        # Convert option difficulty slider
        # into enemy starting gold & income levels.

        [switch]
            variable=random_campaign.difficulty
            [case]
                value=1 # Easy
                {VARIABLE faction_values.gold 150}
                {VARIABLE faction_values.income 0}
            [/case]
            [case]
                value=2 # Normal
                {VARIABLE faction_values.gold 175}
                {VARIABLE faction_values.income 2}
            [/case]
            [case]
                value=3 # Hard
                {VARIABLE faction_values.gold 200}
                {VARIABLE faction_values.income 4}
            [/case]
            [case]
                value=4 # Nightmare
                {VARIABLE faction_values.gold 225}
                {VARIABLE faction_values.income 6}
            [/case]
        [/switch]

		# if Aoh Era checked, add 100 gold & 6 income to starting enemy
		[if]
			{VARIABLE_CONDITIONAL random_campaign.aoh_type_era equals yes}
			[then]
				{VARIABLE_OP faction_values.gold add 100}
				{VARIABLE_OP faction_values.income add 6}
			[/then]
		[/if]
		
        # set income to account for a default of 2 in future scenarios
        {VARIABLE_OP faction_values.income sub 2}

        {VARIABLE current_side {SIDE}}
        {VARIABLE max_side 9}
        {VARIABLE i 0}
        # store each faction side needed and modify some of the values
        [while]
            {VARIABLE_CONDITIONAL current_side less_than_equal_to $max_side}
            [do]
                # store faction side
                [store_side]
                    side=$current_side
                    variable=faction[$i]
                [/store_side]

                # store faction leader
                [store_unit]
                    variable=temp_unit
                    [filter]
                        side=$current_side
                    [/filter]
                [/store_unit]
                # Copy only the info we need to the faction var
                {VARIABLE faction[$i].leader $temp_unit.type}
                {VARIABLE faction[$i].gender $temp_unit.gender}
                {CLEAR_VARIABLE temp_unit}

                # Adjust enemy color to complement player's chosen color
                # Only adjust for mp 1 player, not 3 player.
                [if]
                    {VARIABLE_CONDITIONAL random_campaign.scenario_prefix equals "RC_1P_"}
                    [then]
                        {RC_COLOR_ADJUST $player1.color temp_color}
                        {VARIABLE faction[$i].color $temp_color}
                        {CLEAR_VARIABLE temp_color}
                    [/then]
                [/if]

                # modify the gold & income to chosen settings
                {VARIABLE faction[$i].gold $faction_values.gold}
                {VARIABLE faction[$i].income $faction_values.income}

                # use lua to extract ai recruitment_pattern and add it
                [lua]
                    code=<<
                        local j = wesnoth.get_variable("current_side")
                        wesnoth.set_variable("lua_store", wesnoth.sides[j].__cfg)
                    >>
                [/lua]
                {LOOKUP_INDEX lua_store.ai.aspect id "recruitment_pattern" index}
                {VARIABLE faction[$i].recruitment_pattern "$lua_store.ai.aspect[$index].facet.value"}
                {CLEAR_VARIABLE index,lua_store}

                {VARIABLE_OP i add 1}
                {VARIABLE_OP current_side add 1}
            [/do]
        [/while]
        {CLEAR_VARIABLE i,current_side,max_side,faction_values}

        # Go through each of the sides, Copy first into new array
        # check if second is same as first by recruit, if not copy into second slot
        # then check third. Continue for fourth. Go backwards through side array.
        # It's just simpler to ignore duplicate leaders if recruit is duplicate.
        # Rough odds of a 6 faction era having a faction repeat are 1 in ????.

        # add first enemy
        [set_variables]
            name=enemy[0]
            mode=replace
            to_variable=faction[8]
        [/set_variables]
        {VARIABLE i 7}
        {VARIABLE j 1}
        [while]
            {VARIABLE_CONDITIONAL i greater_than_equal_to 0}
            {VARIABLE_CONDITIONAL j less_than 4}
            [do]
                {FOREACH enemy k}
                    [if]
                        {VARIABLE_CONDITIONAL faction[$i].recruit equals $enemy[$k].recruit}
                        [then]
                            {VARIABLE already_present "yes"}
                        [/then]
                    [/if]
                {NEXT k}
                [if]
                    {VARIABLE_CONDITIONAL already_present equals $null}
                    [then]
                        [set_variables]
                            name=enemy[$j]
                            mode=replace
                            to_variable=faction[$i]
                        [/set_variables]
                        {VARIABLE_OP j add 1}
                    [/then]
                    [else]
                        {VARIABLE_OP i sub 1}
                    [/else]
                [/if]
                {CLEAR_VARIABLE already_present}
            [/do]
        [/while]
        # check if we filled all four enemy slots, if not, gotta use something.
        [if]
            {VARIABLE_CONDITIONAL j less_than 4}
            [then]
                [while]
                    {VARIABLE_CONDITIONAL j less_than 4}
                    [do]
                        [set_variables]
                            name=enemy[$j]
                            mode=replace
                            to_variable=faction[$m]
                        [/set_variables]
                        {VARIABLE_OP m add 1}
                        {VARIABLE_OP j add 1}
                    [/do]
                [/while]
            [/then]
        [/if]
        {CLEAR_VARIABLE i,j,m,faction}

        # Adjust enemy gold & income for each scenario
        {VARIABLE_OP enemy[0].gold add 125}
        {VARIABLE_OP enemy[0].income add 6}
        {VARIABLE_OP enemy[0].income multiply 2.5}
        {VARIABLE_OP enemy[0].income sub 2}
        {VARIABLE_OP enemy[1].gold add 50}
        {VARIABLE_OP enemy[1].income add 4}
        {VARIABLE_OP enemy[2].gold add 25}
        {VARIABLE_OP enemy[2].income add 2}
    [/event]
#enddef

# PLAYER AND ENEMY MACROS FOR SCENARIOS

#define RC_PLAYER_SIDE SIDE
    [side]
        side={SIDE}
        save_id="P{SIDE}"
        persistent=yes
        controller=human
        team_name=1
        share_maps=yes
        share_view=yes
        id="Commander" # Custom Campaign Compatability
        type=Peasant   # If no leader is found
    [/side]

    # Unpack player side data out of a var
    [event]
        name=prestart

        # Check if side is being used, if not, skip everything
        [if]
            {VARIABLE_CONDITIONAL player{SIDE}.controller not_equals null}
            [then]
                # Restore the player's side
                [modify_side]
                    side={SIDE}
                    color=$player{SIDE}.color
                    village_gold=$player{SIDE}.village_gold
                    gold=$player{SIDE}.gold
                    income=$player{SIDE}.income
                    fog=$player{SIDE}.fog
                    shroud=$player{SIDE}.shroud
                    [ai]
                        recruitment_pattern=$player{SIDE}.recruitment_pattern
                    [/ai]
                [/modify_side]

                [if] # Check if last scenario
                    {VARIABLE_CONDITIONAL scenario not_equals 4}
                    [then]
                        [modify_turns]
                            value=$player{SIDE}.turn_limit
                        [/modify_turns]
                    [/then]
                    [else]
                        # default is already -1, change var for objectives check
                        {VARIABLE player{SIDE}.turn_limit -1}
                        # increase player gold & income for last scenario.
                        [gold]
                            amount=50
                            side={SIDE}
                        [/gold]
                        [modify_side]
                            side={SIDE}
                            income=4
                        [/modify_side]
                    [/else]
                [/if]

                # show the player the objectives for the map
                [objectives]
                    side={SIDE}
                    [objective]
                        description= _ "Defeat enemy leader"
                        condition=win
                    [/objective]
                    [objective]
                        description= _ "Death of your leader"
                        condition=lose
                    [/objective]
                    [objective]
                        description= _ "Turns run out"
                        condition=lose
                        show_turn_counter=yes
                        [show_if]
                            {VARIABLE_CONDITIONAL player{SIDE}.turn_limit not_equals -1}
                        [/show_if]
                    [/objective]
                [/objectives]
            [/then]
        [/if]
    [/event]

    [event]
        name=victory

        # show the player the whole map
        [modify_side]
            side={SIDE}
            fog=no
            shroud=no
        [/modify_side]
    [/event]
#enddef

#define RC_ENEMY_SIDE SIDE
    # Two parts to a side, the side tag,
    # and the faction.

    [side]
        side={SIDE}
        allow_player=no
        controller=ai
        no_leader=yes
        team_name=2
    [/side]

    [event]
        name=prestart
        # Create an enemy side from the enemy array

        # Get the length of the array, take info
        # from the last slot of the array,
        # then delete the last slot.

        {VARIABLE slot $enemy.length}
        {VARIABLE_OP slot sub 1}

        # Make a new unit instead of unstoring old one
        # so unit will have a proper name for the unit
        # also so initial experience_modifier is wiped
        # as experience_modifier doesn't persist
        [unit]
            side={SIDE}
            type=$enemy[$slot].leader
            canrecruit=yes
            gender=$enemy[$slot].gender
            placement=map,leader
            # All leaders get heroic trait only
            [modifications]
                {RC_TRAIT_HEROIC}
            [/modifications]
        [/unit]

        # restore the rest of the relevant data for the side
        [modify_side]
            side={SIDE}
            color=$enemy[$slot].color
            gold=$enemy[$slot].gold
            income=$enemy[$slot].income
            village_gold=$enemy[$slot].village_gold
            fog=$enemy[$slot].fog
            shroud=$enemy[$slot].shroud
            [ai]
                recruitment_pattern=$enemy[$slot].recruitment_pattern
            [/ai]
        [/modify_side]
        [set_recruit]
            side={SIDE}
            recruit=$enemy[$slot].recruit
        [/set_recruit]

        # clear the array slot we just used
        {CLEAR_VARIABLE enemy[$slot]}
        {CLEAR_VARIABLE slot}
    [/event]
#enddef

#define RC_ENEMY_GOLD_ADJUST_MP SIDE
    [event]
        name=prestart
        # Count number of players
        # Number is used in 3p campaign to determine
        # how much gold & income the enemy side should have.
        [store_unit]
            variable=player_count
            [filter]
                side=1,2,3
                [and]
                    canrecruit=yes
                [/and]
            [/filter]
        [/store_unit]

        [store_side]
            side={SIDE}
            variable=enemy_temp
        [/store_side]

        # var scenario set in next_scenario.cfg
        # gold adjust formula
        {VARIABLE_OP enemy_temp.gold multiply $player_count.length}

        # income adjust formula
        {VARIABLE_OP enemy_temp.income multiply $player_count.length}

        # account for default of 2 income
        {VARIABLE_OP enemy_temp.income sub 2}

        # change gold & income values
        [modify_side]
            side={SIDE}
            gold=$enemy_temp.gold
            income=$enemy_temp.income
        [/modify_side]

        {CLEAR_VARIABLE enemy_temp,player_count}
    [/event]
#enddef
