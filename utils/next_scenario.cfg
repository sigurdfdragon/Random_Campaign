#textdomain wesnoth-Random_Campaign

# The macros in this file handle the setup of the next scenario.
# This includes specifying the next level, and picking the next
# map, the enemy faction, and what gold and income levels are to
# be used for each side.

#define RC_FETCH_NEXT_MAP
    # As cl doesn't work right in this add-on,
    # set_var level= will allow selecting of level
    [if]
        {VARIABLE_CONDITIONAL level not_equals $null}
        [then]
            {VARIABLE random_campaign.current_level $level}
        [/then]
    [/if]
    # Check to see if going to epilogue
    [if]
        {VARIABLE_CONDITIONAL random_campaign.current_level equals 8}
        [then]
            {VARIABLE map Epilogue}
        [/then]
    [/if]

    # This section insures that no map is repeated during the campaign
    # After a map is chosen, it is removed from the array
    # set_var map= will allow selecting of map
    # var is cleared in {RC_NEXT_SCENARIO}

    # check if map list has entries
    [foreach]
        array=map_choice.list
        variable=this_list
        [do]
            [if]
                {VARIABLE_CONDITIONAL this_list.map not_equals $null}
                [then]
                    {VARIABLE list_has_entries "yes"}
                    [break]
                    [/break]
                [/then]
            [/if]
        [/do]
    [/foreach]
    # if map list is empty, fill it.
    # It is map_choice.list so that it is
    # easier to read in the :inspect listing
    [if]
        {VARIABLE_CONDITIONAL list_has_entries not_equals "yes"}
        [then]
            [switch]
                variable=random_campaign.map_set
                [case]
                    value="Random"
                    {VARIABLE list "Barren,Desert,Flood,Jungle,Marsh,River,Vale,Volcano,Winter"}
                [/case]
                [case]
                    value="Fixed"
                    {VARIABLE list "Caves_of_the_Basilisk,Clearing_Gushes,Elensefar_Courtyard,Hamlets,Hornshark_Island,Howling_Ghost_Badlands,Ruphus_Isle,Sablestone_Delta,Silverhead_Crossing,Sullas_Ruins,Swamp_of_Dread,The_Freelands,Tombs_of_Kesorak,Weldyn_Channel"}
                [/case]
#ifhave ~add-ons/Random_Campaign/plugins/map_set_options_switch.cfg
                {~add-ons/Random_Campaign/plugins/map_set_options_switch.cfg}
#endif
            [/switch]
            [set_variables]
                name=map_choice.list
                mode=replace
                [split]
                    list=$list
                    key=map
                    separator=,
                    remove_empty=yes
                [/split]
            [/set_variables]
            {CLEAR_VARIABLE list}
        [/then]
    [/if]
    {CLEAR_VARIABLE list_has_entries}
    [if]
        {VARIABLE_CONDITIONAL map equals $null}
        [then]
            # randomly choose a map
            [set_variable]
                name=map_list
                [join]
                    variable=map_choice.list
                    key=map
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP map rand $map_list}
            {CLEAR_VARIABLE map_list}
        [/then]
    [/if]
    {LOOKUP_INDEX map_choice.list map $map index}
    {CLEAR_VARIABLE map_choice.list[$index].map}
    {CLEAR_VARIABLE index}
    {VARIABLE temp $random_campaign.current_level} # for easier access in id assembly
    # Now that everything is in place, assemble the next scenario id
    {VARIABLE next_scenario ("0$temp|_$map|")}
    {CLEAR_VARIABLE temp}
#enddef

#define RC_CHOOSE_ENEMY
    # This section insures that no opponent is repeated during
    # the campaign until the list runs out of choices.
    # After an opponent is chosen, it is removed from the array
    # set_var enemy= will allow selecting of enemy
    # var is cleared in {RC_SIDE_ENEMY} in _sides.cfg

    # check if enemy list has entries
    [foreach]
        array=enemy_choice.list
        variable=this_list
        [do]
            [if]
                {VARIABLE_CONDITIONAL this_list.enemy not_equals $null}
                [then]
                    {VARIABLE list_has_entries "yes"}
                    [break]
                    [/break]
                [/then]
            [/if]
        [/do]
    [/foreach]
    # if enemy list is empty, fill it.
    # It is enemy_choice.list so that it is
    # easier to read in the :inspect listing
    [if]
        {VARIABLE_CONDITIONAL list_has_entries not_equals "yes"}
        [then]
            [foreach]
                array=era[0].multiplayer_side
                variable=this_faction
                index_var=i
                [do]
                    {VARIABLE enemy_choice.list[$i].enemy $this_faction.id}
                [/do]
            [/foreach]
        [/then]
    [/if]
    {CLEAR_VARIABLE list_has_entries}
    [if]
        {VARIABLE_CONDITIONAL enemy equals $null}
        [then]
            # randomly choose a faction from the era
            # This section insures that no faction is repeated during the campaign until all have been chosen.
            # After a faction is chosen, it is removed from the array
            [set_variable]
                name=enemy_list
                [join]
                    variable=enemy_choice.list
                    key=enemy
                    separator=,
                    remove_empty=yes
                [/join]
            [/set_variable]
            {VARIABLE_OP enemy rand $enemy_list}
            {CLEAR_VARIABLE enemy_list}
        [/then]
    [/if]
    {LOOKUP_INDEX enemy_choice.list enemy $enemy index}
    {CLEAR_VARIABLE enemy_choice.list[$index].enemy}
    {CLEAR_VARIABLE index}

    # Now that everything is in place, the contents of
    # enemy var will be used in {RC_SIDE_ENEMY} in
    # the next scenario.
#enddef

#define RC_NEXT_SCENARIO
    [event]
        name=preload
        first_time_only=no

        # This makes the calculations in gold_and_income.cfg simpler
        # This is in preload so the hack of loading a scenario start in
        # sp, then making a save, then loading that save through
        # the mp dialog will work right. Otherwise base_income would be
        # set back to 2 in that process.
        [lua]
            code=<< wesnoth.game_config.base_income = 0 >>
        [/lua]
    [/event]

    [event]
        name=prestart

        # set gold and income for each side here
        {RC_CALCULATE_SCENARIO_GOLD_AND_INCOME $random_campaign.current_level}
        {RC_SET_GOLD_AND_INCOME_LEVELS}
        {RC_CLEAR_GOLD_AND_INCOME_VARIABLES}
        
        # Clearing variables we don't need at the moment
        # This macro needs to be last in level data
        # as these vars are used in other macro prestart events.
        {CLEAR_VARIABLE next_scenario,level,map}
        # Clearing these again, campaign options attempt to show up every scenario
        {CLEAR_VARIABLE rc_gold_percentage,rc_income_percentage,rc_map_set}
    [/event]

    [event]
        name=enemies_defeated

        {VARIABLE_OP random_campaign.current_level add 1}
        {RC_FETCH_NEXT_MAP}
        [if]
            {VARIABLE_CONDITIONAL next_scenario not_equals "08_Epilogue"}
            [then]
                {RC_CHOOSE_ENEMY}
                [endlevel]
                    result=victory
                    next_scenario=$next_scenario
                    carryover_report=yes
                    carryover_percentage=0
                    carryover_add=no
                    bonus=no
                    linger_mode=yes
                    save=yes
                    replay_save=yes
                    reveal_map=yes
                [/endlevel]
            [/then]
            [else]
                [endlevel]
                    result=victory
                    next_scenario=$next_scenario
                    carryover_report=no
                    linger_mode=yes
                    save=no
                    replay_save=yes
                    reveal_map=yes
                [/endlevel]
            [/else]
        [/if]
    [/event]
#enddef
